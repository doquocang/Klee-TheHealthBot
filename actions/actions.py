# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions


# This is a simple example for a custom action which utters "Hello World!"

from typing import Any, Text, Dict, List

from rasa_sdk.events import SlotSet
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher

import requests
from bs4 import BeautifulSoup
from tabulate import tabulate
import pandas as pd
import re


class WelcomWithName(Action):

    def name(self) -> Text:
        return "action_welcome_with_name"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        slot_cust_role = tracker.get_slot("cust_role").lower()
        slot_cust_name = tracker.get_slot("cust_name")

        if slot_cust_role in ("t√¥i", "m√¨nh", "t·ªõ", "tui", "t"):
            slot_cust_role = "b·∫°n"
        if slot_cust_role not in ("anh", "ch·ªã", "c√¥", "b√°c", "ch√∫", "d√¨", "t√¥i", "m√¨nh", "t·ªõ", "tui", "t", "b·∫°n"):
            slot_cust_role = "qu√Ω kh√°ch"
            dispatcher.utter_message("Klee r·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c ph·ª•c v·ª• " + slot_cust_role + " ·∫°!")
            return [SlotSet("cust_role", slot_cust_role)]
        dispatcher.utter_message("Klee r·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c ph·ª•c v·ª• " + slot_cust_role + " " + slot_cust_name + " ·∫°!")
        return [SlotSet("cust_role", slot_cust_role)]


class GiveNutrition(Action):

    def name(self) -> Text:
        return "action_give_nutrition"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # ƒê·ªçc file Excel ƒë√£ ƒë∆∞·ª£c upload
        df = pd.read_excel(r'D:\Study\python\chatbot\Klee_TheHealthBot-master\excel\calo.xlsx')

        # L·∫•y gi√° tr·ªã t·ª´ slot "cust_food"
        slot_cust_food = tracker.get_slot("cust_food").lower()

        # T√¨m ki·∫øm c√°c d√≤ng c√≥ ch·ª©a t·ª´ kh√≥a trong c·ªôt ƒë·∫ßu ti√™n
        found_rows = df[df.iloc[:, 0].str.contains(slot_cust_food, case=False, na=False)]

        if not found_rows.empty:
            # Ch·ªçn d√≤ng ƒë·∫ßu ti√™n kh·ªõp v·ªõi t·ª´ kh√≥a
            first_row = found_rows.iloc[0]
            # ƒê·ªãnh d·∫°ng th√¥ng tin dinh d∆∞·ª°ng theo y√™u c·∫ßu
            nutrition_info = f"[{first_row[1]}] {first_row[0]} c√≥: {first_row[2]} CALO, {first_row[3]} ƒê·∫†M (g), {first_row[4]} B√âO (g), {first_row[5]} CARB (g), {first_row[6]} ƒê∆Ø·ªúNG (g)"
            message = nutrition_info
        else:
            message = f"Kh√¥ng t√¨m th·∫•y th√¥ng tin dinh d∆∞·ª°ng cho {slot_cust_food}."

        # G·ª≠i tin nh·∫Øn ƒë·∫øn ng∆∞·ªùi d√πng
        dispatcher.utter_message(message)

        return []

class GiveDrugstore(Action):

    def name(self) -> Text:
        return "action_give_drugstore"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        df = pd.read_excel(r'D:\Study\python\chatbot\Klee_TheHealthBot-master\excel\quaythuoc.xlsx')
        table = df.values.tolist()

        dispatcher.utter_message(tabulate(table, headers="firstrow", tablefmt="fancy_grid"))

        return []


class GiveWeather(Action):

    def name(self) -> Text:
        return "action_give_weather"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        resp = requests.get('https://nchmf.gov.vn/Kttvsite/vi-VN/1/hue-w7.html')
        soup = BeautifulSoup(resp.content, "html.parser")

        location = soup.find("h1", class_="tt-news").text.strip()
        rawweather = soup.find("div", class_="content-news fix-content-news")
        weather = rawweather.text.strip()

        # Clean and format the weather text
        weather = weather.replace("\n\n\n", "\n").replace("\n\n\n\n", "\n---------------------------\n")
        weather_lines = weather.split('\n')

        formatted_weather = []
        for line in weather_lines:
            line = line.strip()
            if line:
                if line.startswith("Nhi·ªát ƒë·ªô"):
                    line = "üå°Ô∏è " + line
                elif line.startswith("ƒê·ªô ·∫©m"):
                    line = "üíß " + line
                elif line.startswith("Gi√≥"):
                    line = "üí® " + line
                elif line.startswith("M∆∞a"):
                    line = "üåßÔ∏è " + line
                formatted_weather.append(line)

        formatted_weather_text = "\n".join(formatted_weather)

        message = f"üìç {location}\n\n{formatted_weather_text}"

        dispatcher.utter_message(message)

        return []


class GiveBMI(Action):

    def name(self) -> Text:
        return "action_give_bmi"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        slot_cust_height = tracker.get_slot("cust_height")
        slot_cust_weight = tracker.get_slot("cust_weight")
        slot_cust_role = tracker.get_slot("cust_role")

        height = ""
        x = re.findall('[0-9]+', slot_cust_height)
        if slot_cust_height.find("m√©t") == 0 or slot_cust_height.find("m") == 0:
            height += "1"
        for element in x:
            height += element
        height = int(height)
        if height < 20:
            height *= 10

        weight = ""
        x = re.findall('[0-9]+', slot_cust_weight)
        for element in x:
            weight += element
        weight = int(weight)

        bmi = weight / ((height/100)*(height/100))
        dispatcher.utter_message("Ch·ªâ s·ªë BMI l√Ω t∆∞·ªüng ƒë∆∞·ª£c c√°c t·ªï ch·ª©c y t·∫ø ƒë∆∞a ra l√† v√†o m·ª©c 18,5 - 25. "
                                 "M·ªói ch·ªâ s·ªë BMI s·∫Ω n√≥i l√™n t√¨nh tr·∫°ng c∆° th·ªÉ c·ªßa ch√∫ng ta theo t·ª´ng m·ª©c kh√°c nhau.")
        dispatcher.utter_message("Ch·ªâ s·ªë BMI c·ªßa " + slot_cust_role + " l√†: " + str(bmi))

        tt = "Th·ªÉ tr·∫°ng c·ªßa " + slot_cust_role
        if bmi < 18.5:
            dispatcher.utter_message(tt + ": C√¢n n·∫∑ng th·∫•p (g·∫ßy)")
        elif bmi < 24.9:
            dispatcher.utter_message(tt + ": B√¨nh th∆∞·ªùng")
        elif bmi <= 25:
            dispatcher.utter_message(tt + ": Th·ª´a c√¢n")
        elif bmi < 30:
            dispatcher.utter_message(tt + ": Ti·ªÅn b√©o ph√¨")
        elif bmi < 35:
            dispatcher.utter_message(tt + ": B√©o ph√¨ ƒë·ªô I")
        elif bmi < 40:
            dispatcher.utter_message(tt + ": B√©o ph√¨ ƒë·ªô II")
        else:
            dispatcher.utter_message(tt + ": B√©o ph√¨ ƒë·ªô III")
        return []


class GainWeight(Action):

    def name(self) -> Text:
        return "action_gain_weight"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        dispatcher.utter_message("N·∫°p nhi·ªÅu calo l√† nguy√™n t·∫Øc c∆° b·∫£n ƒë∆∞·ª£c √°p d·ª•ng trong vi·ªác tƒÉng c√¢n. Khi mu·ªën c∆° "
                                 "th·ªÉ tƒÉng c√¢n, ƒëi·ªÅu ƒë·∫ßu ti√™n m·ªôt ng∆∞·ªùi c·∫ßn l√†m l√† ƒÉn nhi·ªÅu h∆°n nhu c·∫ßu nƒÉng l∆∞·ª£ng "
                                 "h√†ng ng√†y c∆° th·ªÉ c·∫ßn. N·∫øu n·∫°p th√™m 500 calo/ng√†y, nh·ªØng ng∆∞·ªùi g·∫ßy kinh ni√™n c√≥ th·ªÉ "
                                 "tƒÉng th√™m 0.5kg/tu·∫ßn\n M·ªôt s·ªë c√°ch tƒÉng c√¢n hi·ªáu qu·∫£:\n"
                                 "- N·∫°p nhi·ªÅu calo h∆°n l∆∞·ª£ng calo ƒë√£ ƒë·ªët ch√°y ƒë·ªÉ tƒÉng c√¢n nhanh\n"
                                 "- Ch√∫ tr·ªçng b·ªï sung c√°c th·ª±c ph·∫©m gi√†u ch·∫•t Protein\n"
                                 "- TƒÉng c∆∞·ªùng l∆∞·ª£ng carbohydrate v√† ch·∫•t b√©o v√†o ch·∫ø ƒë·ªô ƒÉn tƒÉng c√¢n\n"
                                 "- ƒÇn 3 b·ªØa ch√≠nh v√† √≠t nh·∫•t 3 b·ªØa ph·ª• m·ªói ng√†y gi√∫p tƒÉng c√¢n nhanh\n"
                                 "- Duy tr√¨ ch·∫ø ƒë·ªô ƒÉn ƒë·ªÅu ƒë·∫∑n 6 b·ªØa/ng√†y\n"
                                 "- Tuy·ªát ƒë·ªëi kh√¥ng b·ªè b·ªØa, ƒë·∫∑c bi·ªát b·ªØa s√°ng\n"
                                 "- ∆Øu ti√™n th·ª±c ph·∫©m l√†nh m·∫°nh, gi√†u nƒÉng l∆∞·ª£ng k·∫øt h·ª£p n∆∞·ªõc x·ªët v√† gia v·ªã\n"
                                 "- U·ªëng c√°c lo·∫°i th·ª©c u·ªëng gi√†u calo\n"
                                 "- Ng·ªß ƒë·ªß gi·∫•c m·ªói ng√†y\n"
                                 "- T·∫≠p th·ªÉ d·ª•c th·ªÉ thao ƒë·ªÉ ƒë·ªÉ tƒÉng c∆°, tƒÉng c√¢n hi·ªáu qu·∫£")

        return []


class LoseWeight(Action):

    def name(self) -> Text:
        return "action_lose_weight"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        dispatcher.utter_message("C√°ch gi·∫£m c√¢n t·ªët nh·∫•t, ƒë√∫ng ƒë·∫Øn nh·∫•t l√† c·∫Øt gi·∫£m l∆∞·ª£ng Calo c∆° th·ªÉ n·∫°p v√†o. C√≥ th·ªÉ "
                                 "n√≥i c√¢n n·∫∑ng l√† m·ªôt ph∆∞∆°ng tr√¨nh c√¢n b·∫±ng. N·∫øu ƒÉn nhi·ªÅu calo h∆°n m·ª©c ƒë·ªët ch√°y, b·∫°n "
                                 "s·∫Ω tƒÉng c√¢n. V√† n·∫øu b·∫°n ƒÉn √≠t calo h∆°n v√† ƒë·ªët ch√°y nhi·ªÅu calo h∆°n th√¥ng qua ho·∫°t "
                                 "ƒë·ªông th·ªÉ ch·∫•t, b·∫°n s·∫Ω gi·∫£m c√¢n.\n M·ªôt s·ªë c√°ch gi·∫£m c√¢n hi·ªáu qu·∫£:\n"
                                 "- Ki·ªÉm so√°t nƒÉng l∆∞·ª£ng trong kh·∫©u ph·∫ßn ƒÉn\n"
                                 "- C·∫Øt gi·∫£m l∆∞·ª£ng carbs tinh ch·∫ø\n"
                                 "- ƒÇn ƒë·ªß ch·∫•t ƒë·∫°m, ch·∫•t b√©o, rau c·ªß qu·∫£ l√† c√°ch gi·∫£m c√¢n l√†nh m·∫°nh nh·∫•t\n"
                                 "- K·∫øt h·ª£p v·ªõi v·∫≠n ƒë·ªông, t·∫≠p luy·ªán\n"
                                 "- ƒÇn ƒë·ªß b·ªØa, ƒë√∫ng gi·ªù, kh√¥ng b·ªè b·ªØa s√°ng\n"
                                 "- ƒÇn nhi·ªÅu tr√°i c√¢y v√† rau\n"
                                 "- U·ªëng nhi·ªÅu n∆∞·ªõc, ƒÉn th·ª±c ph·∫©m nhi·ªÅu ch·∫•t x∆°\n"
                                 "- D√πng b√°t, ƒëƒ©a nh·ªè h∆°n, l√™n k·∫ø ho·∫°ch cho b·ªØa ƒÉn\n"
                                 "- Kh√¥ng ki√™ng tuy·ªát ƒë·ªëi b·∫•t k·ª≥ lo·∫°i th·ª±c ph·∫©m n√†o\n"
                                 "- Kh√¥ng d·ª± tr·ªØ ƒë·ªì ƒÉn v·∫∑t, c·∫Øt gi·∫£m r∆∞·ª£u")

        return []


class Exercise(Action):

    def name(self) -> Text:
        return "action_exercise"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        df = pd.read_excel(r'D:\Study\python\chatbot\Klee_TheHealthBot-master\excel\taptd.xlsx')
        table = df.values.tolist()

        dispatcher.utter_message(tabulate(table, headers="firstrow", tablefmt="fancy_grid"))

        return []

# ViemPheQuanCap
class Chuan_doan_phanbiet_viemphequancap(Action):

    def name(self) -> Text:
        return "action_chuan_doan_phanbiet_viemphequancap"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # # slot_cust_role = tracker.get_slot("cust_role").lower()
        # # slot_cust_name = tracker.get_slot("cust_name")
        # if len(slot_cust_name) == 0:
        #     rn = slot_cust_role + slot_cust_name
        # else:
        #     rn = slot_cust_role + " " + slot_cust_name

        dispatcher.utter_message("Ch·∫©n ƒëo√°n ph√¢n bi·ªát: \n"
                                 " - hen ph·∫ø qu·∫£n tƒÉng ti·∫øt d·ªãch: sau c∆°n hen th√¨ h·∫øt c√°c tri·ªáu ch·ª©ng\n"
                                 " - ·ª© ƒë·ªçng ph·ªïi trong suy tim: c√≥ bi·ªÉu hi·ªán suy tim\n"
                                 " - nghe ph·ªïi c√≥ ran r√≠t\n"
                                 " - M·ªôt s·ªë b·ªánh ph·ªïi c√≥ bi·ªÉu hi·ªán vi√™m ph·∫ø qu·∫£n: lao ph·ªïi, b·ªánh b·ª•i ph·ªïi, ung th∆∞ ph·ªïi: "
                                 "kh√¥ng nghƒ© ƒë·∫øn vi√™m ph·∫ø qu·∫£n n·∫øu tri·ªáu ch·ª©ng nghe ph·ªïi ch·ªâ ·ªü m·ªôt b√™n\n"
                                 )

        return []

    class Treatment_viemphequancap(Action):

        def name(self) -> Text:
            return "action_treatment_viemphequancap"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ch·ªØa tr·ªã: \n"
                                     "Th·ªÉ nh·∫π: ngh·ªâ ng∆°i t·∫°i gi∆∞·ªùng, u·ªëng ƒë·ªß n∆∞·ªõc, kh√¥ng c·∫ßn d√πng kh√°ng sinh \n"
                                     "Th·ªÉ n·∫∑ng: Cho kh√°ng sinh:\n"
                                     " - Nh√≥m Macrolid: Erythromycin u·ªëng 2g/ng√†y, Azythromycin 0.5 g/ng√†y ƒë·∫ßu sau ƒë√≥ 250mg x 4 ng√†y, \n"
                                     " - Nh√≥m Quinolon: Ciprofloxacin u·ªëng 200 - 400mg/ ng√†y\n"
                                     " - N√™n cho kh√°ng histamin khi c√≥ d·∫•u hi·ªáu co th·∫Øt ph·∫ø qu·∫£n\n"
                                     " - Long ƒë·ªùm: Acemux, Mucomys 200 mg x 4 g√≥i/ ng√†y\n"
                                     )

            return []


    class Prevent_viemphequancap(Action):

        def name(self) -> Text:
            return "action_prevent_viemphequancap"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ph√≤ng b·ªánh: \n"
                                     " - B·ªè, h·∫°n ch·∫ø c√°c y·∫øu t·ªë k√≠ch th√≠ch: thu·ªëc l√° thu·ªëc l√†o \n"
                                     " - B·∫£o h·ªô lao ƒë·ªông cho nh·ªØng ng∆∞·ªùi ti·∫øp x√∫c v·ªõi m√¥i tr∆∞·ªùng c√≥ nhi·ªÅu b·ª•i nh∆∞ c√¥ng nh√¢n l√†m vi·ªác ·ªü h·∫ßm m·ªè.\n"
                                     " - X√¢y d·ª±ng c√°c x√≠ nghi·ªáp xa v√πng d√¢n c∆∞ v√† ng∆∞·ª£c chi·ªÅu gi√≥.\n"
                                     " - Ti√™m ph√≤ng c√∫m v√†o m√πa thu - ƒë√¥ng\n"
                                     " - ƒêi·ªÅu tr·ªã t·ªët c√°c ·ªï nhi·ªÖm tr√πng ƒë∆∞·ªùng h√¥ h·∫•p tr√™n"
                                     )

            return []

    class Treatment_tanghuyetap(Action):

        def name(self) -> Text:
            return "action_treatment_tanghuyetap"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ch·ªØa tr·ªã: \n"
                                     " - H·∫°n ch·∫ø Na d∆∞·ªõi 5g NaCl m·ªói ng√†y.\n"
                                     " - H·∫°n ch·∫ø m·ª°, c√°c ch·∫•t b√©o ƒë·ªông v·∫≠t\n"
                                     " - Kh√¥ng r∆∞·ª£u, thu·ªëc l√°, ch√® ƒë·∫∑c\n"
                                     " - Tr√°nh lao ƒë·ªông tr√≠ √≥c cƒÉng th·∫≥ng, lo l·∫Øng qu√° ƒë·ªô, n√™n t·∫≠p th·ªÉ d·ª•c nh·∫π, ƒëi b·ªô th∆∞ gi√£n, b∆°i l·ªôi\n"
                                     " - Gi·∫£m c√¢n n·∫∑ng\n"
                                     " - Ho·∫°t ƒë·ªông th·ªÉ l·ª±c\n"
                                     )

            return []


    class Prevent_tanghuyetap(Action):

        def name(self) -> Text:
            return "action_prevent_tanghuyetap"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ph√≤ng b·ªánh: \n"
                                     " - T·ªï ch·ª©c kh√°m b·ªánh th∆∞·ªùng xuy√™n, c√≥ chu k·ª≥, c√≥ ƒëo huy·∫øt √°p, quan tr·ªçng nh·∫•t l√† ph√°t hi·ªán b·ªánh ·ªü giai ƒëo·∫°n ƒë·∫ßu\n"
                                     " - B·ªë tr√≠ gi·ªù gi·∫•c, ch·∫ø ƒë·ªô ngh·ªâ ng∆°i h·ª£p l√Ω, xen k·∫Ω\n"
                                     " - H·∫°n ch·∫ø mu·ªëi, tr√°nh c√°c ch·∫•t k√≠ch th√≠ch (thu·ªëc l√°, c√† ph√™, r∆∞·ª£u, ch√®‚Ä¶..)\n"
                                     " - Trong sinh ho·∫°t tr√°nh m·ªçi cƒÉng th·∫≥ng, x√∫c c·∫£m m·∫°nh.\n"
                                     " -  Nh·ªØng ng∆∞·ªùi lao ƒë·ªông tr√≠ √≥c c·∫ßn k·∫øt h·ª£p v·ªõi c√¥ng vi·ªác ch√¢n tay nh·∫π nh√†ng t·∫≠p th·ªÉ d·ª•c"
                                     )

            return []

    class Treatment_nhoimaucotim(Action):

        def name(self) -> Text:
            return "action_treatment_nhoimaucotim"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ch·ªØa tr·ªã: \n"
                                     " Giai ƒëo·∫°n tr∆∞·ªõc khi v√†o b·ªánh vi·ªán:\n"
                                     " - An th·∫ßn Diazepam 10mg u·ªëng\n"
                                     " - Thu·ªëc gi√£n m·∫°ch v√†nh papaverin\n"
                                     " - Chuy·ªÉn b·ªánh nh√¢n ƒë·∫øn b·ªánh vi·ªán\n"
                                     " Giai ƒëo·∫°n ·ªü b·ªánh vi·ªán: \n"
                                     " - Th·ªü oxy\n"
                                     " - Nitroglyxerin 0,5mg ƒë·∫∑t d∆∞·ªõi l∆∞·ª°i\n"
                                     " - N·∫øu kh√¥ng h·∫øt ƒëau cho propranolol 20mg (u·ªëng) x 2- 4 l·∫ßn/ng√†y\n"
                                     " - Thu·ªëc ·ª©c ch·∫ø canxi: Nifedipin 10- 20mg x 3- 4 l·∫ßn trong ng√†y\n"
                                     )

            return []

    class Prevent_nhoimaucotim(Action):

        def name(self) -> Text:
            return "action_prevent_nhoimaucotim"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ph√≤ng b·ªánh: \n"
                                     " - B·ªè thu·ªëc l√°\n"
                                     " - C√≥ ch·∫ø ƒë·ªô theo d√µi ch·∫∑t ch·∫Ω huy·∫øt √°p\n"
                                     " - Gi·∫£m m·ª° m√°u\n"
                                     " - ƒêi·ªÅu tr·ªã t√≠ch c·ª±c ƒë√°i th√°o ƒë∆∞·ªùng\n"
                                     " - TƒÉng c∆∞·ªùng luy·ªán t·∫≠p v√† ho·∫°t ƒë·ªông th·ªÉ l·ª±c nhi·ªÅu h∆°n\n"
                                     )

            return []

    class Treatment_sogan(Action):

        def name(self) -> Text:
            return "action_treatment_sogan"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ch·ªØa tr·ªã: \n"
                                     " Ch·∫ø ƒë·ªô ngh·ªâ ng∆°i tuy·ªát ƒë·ªëi trong ƒë·ª£t ti·∫øn tri·ªÉn\n"
                                     " ƒÇn tƒÉng ƒë∆∞·ªùng, ƒë·∫°m, ƒÉn nh·∫°t n·∫øu c√≥ ph√π\n"
                                     " Thu·ªëc: \n"
                                     " - C·∫£i thi·ªán chuy·ªÉn ho√° t·∫ø b√†o gan: c√°c vitamin\n"
                                     " - TƒÉng c∆∞·ªùng ƒë·ªìng ho√° ƒë·∫°m: Testosteron 100mg/ 2 tu·∫ßn\n"
                                     " - U·ªëng, truy·ªÅn Glucoza\n"
                                     " - Truy·ªÅn m√°u, ƒë·∫°m, plasma, albumin.\n"
                                     " - L·ª£i ti·ªÉu kh√¥ng th·∫£i Kali, kh√°ng aldosteron;"
                                     )

            return []

    class Prevent_sogan(Action):

        def name(self) -> Text:
            return "action_prevent_sogan"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ph√≤ng b·ªánh: \n"
                                     " - Bi·ªán ph√°p chung d·ª± ph√≤ng l√† kh√¥ng l√†m cho gan nhi·ªÖm ƒë·ªôc.ƒêi·ªÅu tr·ªã c√°c b·ªánh gan c√≥ s·∫µn\n"
                                     " - Kh√¥ng u·ªëng nhi·ªÅu r∆∞·ª£u\n"
                                     " - p tuy√™n truy·ªÅn t√°c h·∫°i c·ªßa r∆∞·ª£u , b·ªánh vi√™m gan B , c√°c t√°c nh√¢n kh√°c... v√† d·ª± ph√≤ng Vaccin vi√™m gan B\n"
                                     )

            return []

    class Treatment_daithaoduong(Action):

        def name(self) -> Text:
            return "action_treatment_daithaoduong"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ch·ªØa tr·ªã: \n"
                                     " - ƒê√°i th√°o ƒë∆∞·ªùng typ I: Th∆∞·ªùng ·ªü ng∆∞·ªùi tr·∫ª:\n"
                                     "th·ªÉ tr·∫°ng g·∫ßy, c√≥ nhi·ªÅu bi·∫øn ch·ª©ng v√† hay "
                                     "g·∫∑p bi·∫øn ch·ª©ng v·ªÅ chuy·ªÉn ho√°, kh√°ng nguy√™n b·∫°ch c·∫ßu thu·ªôc nh√≥m HLA-DR3, "
                                     "HLA-DR4, c√≥ kh√°ng th·ªÉ ch·ªëng t·∫ø b√†o Langerhgans. B·∫Øt bu·ªôc ph·∫£i ƒëi·ªÅu tr·ªã b·∫±ng"
                                     "insulin ti√™m. - \n"
                                     " - ƒê√°i th√°o ƒë∆∞·ªùng typ II: Th∆∞·ªùng ·ªü ng∆∞·ªùi nhi·ªÅu tu·ªïi, th·ªÉ tr·∫°ng b√©o, √≠t c√≥ bi·∫øn "
                                     "ch·ª©ng v√† hay g·∫∑p bi·∫øn ch·ª©ng v·ªÅ tim m·∫°ch. Th∆∞·ªùng d√πng vi√™n h·∫° ƒë∆∞·ªùng huy·∫øt u·ªëng,"
                                     "trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p c·ª• th·ªÉ (h√¥n m√™, c√≥ bi·∫øn ch·ª©ng tim m·∫°ch, giai ƒëo·∫°n mu·ªôn) "
                                     "ph·∫£i d√πng insulin ti√™m.\n"
                                     )

            return []

    class Prevent_daithaoduong(Action):

        def name(self) -> Text:
            return "action_prevent_daithaoduong"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ph√≤ng b·ªánh: \n"
                                     " - Ngh·ªâ ng∆°i ho√†n to√†n trong giai ƒëo·∫°n c·∫•p\n"
                                     " - Giai ƒëo·∫°n ·ªïn ƒë·ªãnh, l√†m vi·ªác b√¨nh th∆∞·ªùng, tr√°nh lao ƒë·ªông qu√° s·ª©c\n"
                                     " - ƒÇn: H·∫°n ch·∫ø ch·∫•t Glucid nh∆∞ng v·∫´n ph·∫£i ƒë·∫£m b·∫£o s·ªë calo c·∫ßn thi·∫øt cho m·ªói ng√†y (2000 calo)\n"
                                     " - ƒêi·ªÅu ch·ªânh l∆∞·ª£ng th·ª©c ƒÉn theo k·∫øt qu·∫£ x√©t nghi·ªám sinh h√≥a cho th√≠ch h·ª£p\n"
                                     " - ƒÇn tƒÉng Protid th·ª±c v·∫≠t v√† nhi·ªÅu Vitamin"
                                     )

            return []

    class Treatment_loetdaday(Action):

        def name(self) -> Text:
            return "action_treatment_loetdaday"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ch·ªØa tr·ªã: \n"
                                     " - Thu·ªëc ch·ªëng axit: Ch·ªß y·∫øu trung ho√† axit: Hydroxit nh√¥m, Hydroxit magi√™, trixilicat magi√™. "
                                     "Kh√¥ng d√πng NaHCO3 g√¢y vi√™m d·∫° d√†y v√† tƒÉng HCl pha 2 \n"
                                     " - C√°c thu·ªëc b·∫£o v·ªá ni√™m m·∫°c, bƒÉng ni√™m m·∫°c: Alumin Sacharo sulfat ( Surcralfate). Khi g·∫∑p HCl "
                                     "tr·ªü n√™n d√≠nh qu√°nh, c√≥ t√°c d·ª•ng bƒÉng ni√™m m·∫°c\n"
                                     " - C√°c thu·ªëc ch·ªëng b√†i ti·∫øt: ·ª®c ch·∫ø c·∫£m th·ª• H2 (t·∫ø b√†o vi·ªÅn): cimetidin, ranitidin, nizatidin, "
                                     "famotidin th·∫ø h·ªá sau c√≥ nhi·ªÅu ∆∞u vi·ªát h∆°n th·∫ø h·ªá tr∆∞·ªõc li·ªÅu nh·ªè h∆°n √≠t t√°c d·ª•ng ph·ª• h∆°n\n"
                                     " - \n"
                                     )

            return []

    class Prevent_loetdaday(Action):

        def name(self) -> Text:
            return "action_prevent_loetdaday"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ph√≤ng b·ªánh: \n"
                                     " - ƒêi·ªÅu tr·ªã s·ªõm b·ªánh lo√©t, ƒëi·ªÅu tr·ªã tri·ªát ƒë·ªÉ, tr√°nh c√°c bi·∫øn ch·ª©ng x·∫£y ra\n"
                                     " - M·ªôt s·ªë thu·ªëc c√≥ kh·∫£ nƒÉng l√†m tƒÉng nguy c∆° bi·∫øn ch·ª©ng ho·∫∑c tƒÉng nguy c∆° "
                                     "m·∫Øc b·ªánh nh∆∞ c√°c thu·ªëc gi·∫£m ƒëau ch·ªëng vi√™m, c√°c steroid ph·∫©i ƒë∆∞·ª£c ch√∫ √Ω ƒë·∫∑c bi√™t "
                                     "khi d√πng cho nh∆∞ngbnguoi c√≥ ti·ªÅn s·ª≠ lo√©t\n"
                                     " - C√°c thu·ªëc ƒëi·ªÅu tr·ªã d·∫° d√†y h√†nh t√° tr√†ng hi·ªán nay ch∆∞a th·∫•y c√≥ tai bi·∫øn ƒë√°ng k·ªÉ. "
                                     "v·ªõi c√°c kh√°ng sinh ph·∫£i tu√¢n th·ªß nguy√™n t·∫Øc s·ª≠ d·ª•ng klh√°ng sinh.\n"
                                     )

            return []

    class Treatment_benh(Action):

        def name(self) -> Text:
            return "action_treatment_soithan"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ch·ªØa tr·ªã:\n"
                                     " - Ch√∫ √Ω ch·∫ø ƒë·ªô ƒÉn: ƒÉn nhi·ªÅu hoa qu·∫£, rau, s·ªØa. N√™n h·∫°n ch·∫ø ƒÉn th·ªãt "
                                     "hay th·ª©c ƒÉn c√≥ nhi·ªÅu Canxi (tu·ª≥ theo lo·∫°i s·ªèi)\n"
                                     " - D√πng t·ª´ng ƒë·ª£t thu·ªëc l·ª£i ti·ªÉu ƒë√¥ng v√† t√¢y y.\n"
                                     " - D√πng k·∫øt h·ª£p v·ªõi thu·ªëc tƒÉng co b√≥p m·∫°ch nh∆∞ Prostigmin ho·∫∑c thu·ªëc c√≥ t√°c "
                                     "d·ª•ng gi√£n c∆° nh∆∞ Atropin hay Nospa\n"
                                     " - D√πng kh√°ng sinh trong nh·ªØng tr∆∞·ªùng h·ª£p c√≥ nhi·ªÖm khu·∫©n\n"
                                     )

            return []

    class Prevent_benh(Action):

        def name(self) -> Text:
            return "action_prevent_soithan"

        def run(self, dispatcher: CollectingDispatcher,
                tracker: Tracker,
                domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

            dispatcher.utter_message("Sau ƒë√¢y l√† m·ªôt s·ªë c√°ch ph√≤ng b·ªánh: \n"
                                     " - C·∫ßn t·∫©y giun, s√°n th∆∞·ªùng xuy√™n ƒë·ªÉ tr√°nh nh·ªØng r·ªëi lo·∫°n v√† chuy·ªÉn ho√° ch·∫•t.\n"
                                     " - ƒê·∫£m b·∫£o ch·∫ø ƒë·ªô ƒÉn ƒë·ªß c√°c ch·∫•t , h·ª£p l√Ω, th·ª©c ƒÉn n√™n thay ƒë·ªïi.\n"
                                     " - Cho u·ªëng ƒë·ªß n∆∞·ªõc v·ªõi nh·ªØng b·ªánh nh√¢n ph·∫£i n·∫±m l√¢u d√†i (li·ªát tu·ª∑, lao c·ªôt s·ªëng, g√£y x∆∞∆°ng).\n"
                                     )

            return []